<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Razor</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.Razor.Compilation.CompilerServices">
            <summary>
            Provides service methods for compilation.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.IsAnonymousType(System.Type)">
            <summary>
            Determines if the specified type is an anonymous type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.IsDynamicType(System.Type)">
            <summary>
            Determines if the specified type is a dynamic type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.GetConstructors(System.Type)">
            <summary>
            Gets the public or protected constructors of the specified type.
            </summary>
            <param name="type">The target type.</param>
            <returns>An enumerable of constructors.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.GetLoadedAssemblies">
            <summary>
            Gets an enumerable of all assemblies loaded in the current domain.
            </summary>
            <returns>An enumerable of loaded assemblies.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.DirectivesParser.TryFindGlobalDirectivesFile(System.String,System.String,System.String@)">
            <summary>
            Attempts to locate the nearest global directive file by 
            </summary>
        </member>
        <member name="P:ServiceStack.Razor.Compilation.RazorPageHost.RootNamespace">
            <summary>
            Gets or sets the root namespace used when the full namespace is inferred from the VirtualPath.
            </summary>
        </member>
        <member name="F:ServiceStack.Razor.Managers.FileSystemWatcherLiveReload.FileSystemWatcher">
            <summary>
            The purpose of the FileSystemWatcher is to ensure razor pages are
            consistent with the code generated by the razor engine. The file
            system watcher will invalidate pages and queue them for recompilation.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.FileSystemWatcherLiveReload.FileSystemWatcher_Error(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Avoid throwing unhandled exception when shutting down ASP.NET host
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Managers.RazorPageResolver">
            <summary>
            A common hook into ServiceStack and the hosting infrastructure used to resolve requests.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.RazorPageResolver.ProcessRequestAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String)">
            <summary>
            This is called by the hosting environment via CatchAll usually for content pages.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.RazorPageResolver.ProcessRequestAsync(ServiceStack.Web.IRequest,System.Object,System.IO.Stream)">
            <summary>
            Called by the HtmlFormat:IPlugin who checks to see if any registered view engines can handle the response DTO.
            If this view engine can handle the response DTO, then process it, otherwise, returning false will
            allow another view engine to attempt to process it. If no view engines can process the DTO,
            HtmlFormat will simply handle it itself.
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Managers.RazorViewManager">
            <summary>
            This view manager is responsible for keeping track of all the 
            available Razor views and states of Razor pages.
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.AttributeValue">
            <summary>
            Class to represent attribute values and, more importantly, 
            decipher them from tuple madness slightly.
            </summary>
        </member>
        <member name="M:ServiceStack.Formats.MarkdownFormat.SerializeToStreamAsync(ServiceStack.Web.IRequest,System.Object,System.IO.Stream)">
            <summary>
            Render Markdown for text/markdown and text/plain ContentTypes
            </summary>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.AntiForgery">
            <summary>
            Provides access to the anti-forgery system, which provides protection against
            Cross-site Request Forgery (XSRF, also called CSRF) attacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.GetHtml">
            <summary>
            Generates an anti-forgery token for this request. This token can
            be validated by calling the Validate() method.
            </summary>
            <returns>An HTML string corresponding to an &lt;input type="hidden"&gt;
            element. This element should be put inside a &lt;form&gt;.</returns>
            <remarks>
            This method has a side effect: it may set a response cookie.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.GetTokens(System.String,System.String@,System.String@)">
            <summary>
            Generates an anti-forgery token pair (cookie and form token) for this request.
            This method is similar to GetHtml(), but this method gives the caller control
            over how to persist the returned values. To validate these tokens, call the
            appropriate overload of Validate.
            </summary>
            <param name="oldCookieToken">The anti-forgery token - if any - that already existed
            for this request. May be null. The anti-forgery system will try to reuse this cookie
            value when generating a matching form token.</param>
            <param name="newCookieToken">Will contain a new cookie value if the old cookie token
            was null or invalid. If this value is non-null when the method completes, the caller
            must persist this value in the form of a response cookie, and the existing cookie value
            should be discarded. If this value is null when the method completes, the existing
            cookie value was valid and needn't be modified.</param>
            <param name="formToken">The value that should be stored in the &lt;form&gt;. The caller
            should take care not to accidentally swap the cookie and form tokens.</param>
            <remarks>
            Unlike the GetHtml() method, this method has no side effect. The caller
            is responsible for setting the response cookie and injecting the returned
            form token as appropriate.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.Validate">
            <summary>
            Validates an anti-forgery token that was supplied for this request.
            The anti-forgery token may be generated by calling GetHtml().
            </summary>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.Validate(System.String,System.String)">
            <summary>
            Validates an anti-forgery token pair that was generated by the GetTokens method.
            </summary>
            <param name="cookieToken">The token that was supplied in the request cookie.</param>
            <param name="formToken">The token that was supplied in the request form body.</param>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.AntiForgeryConfig">
            <summary>
            Provides programmatic configuration for the anti-forgery token system.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.AdditionalDataProvider">
            <summary>
            Specifies an object that can provide additional data to put into all
            generated tokens and that can validate additional data in incoming
            tokens.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.CookieName">
            <summary>
            Specifies the name of the cookie that is used by the anti-forgery
            system.
            </summary>
            <remarks>
            If an explicit name is not provided, the system will automatically
            generate a name.
            </remarks>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.RequireSsl">
            <summary>
            Specifies whether SSL is required for the anti-forgery system
            to operate. If this setting is 'true' and a non-SSL request
            comes into the system, all anti-forgery APIs will fail.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.SuppressIdentityHeuristicChecks">
            <summary>
            Specifies whether the anti-forgery system should skip checking
            for conditions that might indicate misuse of the system. Please
            use caution when setting this switch, as improper use could open
            security holes in the application.
            </summary>
            <remarks>
            Setting this switch will disable several checks, including:
            - Identity.IsAuthenticated = true without Identity.Name being set
            - special-casing claims-based identities
            </remarks>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.UniqueClaimTypeIdentifier">
            <summary>
            If claims-based authorization is in use, specifies the claim
            type from the identity that is used to uniquely identify the
            user. If this property is set, all claims-based identities
            <em>must</em> return unique values for this claim type.
            </summary>
            <remarks>
            If claims-based authorization is in use and this property has
            not been set, the anti-forgery system will automatically look
            for claim types "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
            and "http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider".
            </remarks>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider">
            <summary>
            Allows providing or validating additional custom data for anti-forgery tokens.
            For example, the developer could use this to supply a nonce when the token is
            generated, then he could validate the nonce when the token is validated.
            </summary>
            <remarks>
            The anti-forgery system already embeds the client's username within the
            generated tokens. This interface provides and consumes <em>supplemental</em>
            data. If an incoming anti-forgery token contains supplemental data but no
            additional data provider is configured, the supplemental data will not be
            validated.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.GetAdditionalData(System.Web.HttpContextBase)">
            <summary>
            Provides additional data to be stored for the anti-forgery tokens generated
            during this request.
            </summary>
            <param name="context">Information about the current request.</param>
            <returns>Supplemental data to embed within the anti-forgery token.</returns>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.ValidateAdditionalData(System.Web.HttpContextBase,System.String)">
            <summary>
            Validates additional data that was embedded inside an incoming anti-forgery
            token.
            </summary>
            <param name="context">Information about the current request.</param>
            <param name="additionalData">Supplemental data that was embedded within the token.</param>
            <returns>True if the data is valid; false if the data is invalid.</returns>
        </member>
        <member name="M:ServiceStack.Html.HtmlExtensions.ErrorSummary(ServiceStack.Html.HtmlHelper,System.String)">
            <summary>
            Alias for ServiceStack Html.ValidationSummary() with comma-delimited field names 
            </summary>
        </member>
        <member name="M:ServiceStack.Html.ScopeStorageDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Html.ScopeStorageDictionary"/> class.
            </summary>
            <param name="baseScope">The base scope.</param>
            <param name="backingStore">
            The dictionary to use as a storage. Since the dictionary would be used as-is, we expect the implementer to 
            use the same key-value comparison logic as we do here.
            </param>
        </member>
        <member name="T:ServiceStack.Html.ScopeStorageComparer">
            <summary>
            Custom comparer for the context dictionaries
            The comparer treats strings as a special case, performing case insesitive comparison. 
            This guaratees that we remain consistent throughout the chain of contexts since PageData dictionary 
            behaves in this manner.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ViewEngine">
            <summary>
            Reference to MarkdownViewEngine
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.AppHost">
            <summary>
            The AppHost so you can access configuration and resolve dependencies, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.MarkdownPage">
            <summary>
            This precompiled Markdown page with Metadata
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Html">
            <summary>
            ASP.NET MVC's HtmlHelper
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ScopeArgs">
            <summary>
            All variables passed to and created by your page. 
            The Response DTO is stored and accessible via the 'Model' variable.
             
            All variables and outputs created are stored in ScopeArgs which is what's available
            to your website template. The Generated page is stored in the 'Body' variable.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.RenderHtml">
            <summary>
            Whether HTML or Markdown output is requested
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Model">
            <summary>
            The Response DTO
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.GetHtmlHelper">
            <summary>
            Ensure the same instance is used for subclasses
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.InitHelpers">
            <summary>
            Called before page is executed
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.OnLoad">
            <summary>
            Called after page is executed but before it's merged with the 
            website template if any.
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Raw(System.String)">
            <summary>
            Don't HTML encode safe output
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Partial(System.String,System.Object)">
            <summary>
            Return the output of a different view with the specified name 
            using the supplied model
            </summary>
            <param name="viewName"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Get``1">
            <summary>
            Resolve registered Assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="T:MarkdownSharp.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers. 
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(System.Boolean)">
            <summary>
            Create a new Markdown instance and optionally load options from a configuration
            file. There they should be stored in the appSettings section, available options are:
            
                Markdown.StrictBoldItalic (true/false)
                Markdown.EmptyElementSuffix (">" or " />" without the quotes)
                Markdown.LinkEmails (true/false)
                Markdown.AutoNewLines (true/false)
                Markdown.AutoHyperlink (true/false)
                Markdown.EncodeProblemUrlCharacters (true/false) 
                
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunBlockGamut(System.String,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.FormParagraphs(System.String,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title") 
            [link text][id] 
            [id] 
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags. 
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHeaders(System.String)">
            <summary>
            Turn Markdown headers into HTML header tags
            </summary>
            <remarks>
            Header 1  
            ========  
            
            Header 2  
            --------  
            
            # Header 1  
            ## Header 2  
            ## Header 2 with closing hashes ##  
            ...  
            ###### Header 6  
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoLists(System.String)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec 
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeProblemUrlChars(System.String)">
            <summary>
            hex-encodes some unusual "problem" chars in URLs to avoid URL detection problems 
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
            don't conflict with their use in Markdown for code, italics and strong. 
            We're replacing each such character with its corresponding hash 
            value; this is likely overkill, but it should prevent us from colliding 
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces; 
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
            makes sure text ends with a couple of newlines; 
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
    </members>
</doc>
